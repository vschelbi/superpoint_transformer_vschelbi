defaults:
  - default.yaml

_target_: src.datamodules.s3dis.S3DISDataModule

fold: 5
trainval: True
val_on_test: True
in_memory: False  # set to True to load all processed S3DIS in RAM. This will accelerate training but CAREFUL not to modify the data in place !

dataloader:
    batch_size: 1

# These parameters are not actually used by the DataModule, but are used
# here to facilitate model parameterization with config interpolation
num_classes: 13
num_hf_point: ${eval:'sum([${datamodule.features}[k] for k in ${datamodule.point_hf})'}
num_hf_segment: ${eval:'sum([${datamodule.features}[k] for k in ${datamodule.segment_hf})'}
num_hf_horizontal_edge: ${eval:'len(${datamodule.select_feat_horizontal_edge})'}
num_hf_vertical_edge: ${eval:'len(${datamodule.select_feat_vertical_edge})'}

# Parameters declared here to facilitate tuning configs without copying
# all the pre_transforms

# Features that will be computed, saved, loaded for points and segments
partition_hf: ['rgb', 'linearity', 'planarity', 'scattering', 'verticality', 'elevation']  # point features used for the partition
point_hf: ['rgb', 'linearity', 'planarity', 'scattering', 'verticality', 'elevation', 'pos_room']  # point features used for training
segment_hf: ['mean_rgb', 'mean_pos_room', 'mean_elevation', 'log_length', 'log_surface', 'log_volume', 'log_size', 'normal']  # segment features used for training

point_save_keys: null  # level-0 keys to save on disk after preprocessing, 'null' to save all
segment_save_keys: null  # level-1+ keys to save on disk after preprocessing, 'null' to save all

point_basic_load_keys: ['pos', 'y', 'super_index', 'is_val']  # needed point attributes, other than features
segment_basic_load_keys: ['pos', 'y', 'super_index', 'sub', 'edge_index', 'edge_attr']  # needed segment attributes, other than features

point_load_keys: ${eval:'${datamodule.point_basic_load_keys} + ${datamodule.point_hf}'}  # level-0 keys to load from disk after preprocessing, 'null' to load all
segment_load_keys: ${eval:'${datamodule.segment_basic_load_keys} + ${datamodule.segment_hf}'}  # level-1+ keys to load from disk after preprocessing, 'null' to load all










# Based on SPG: https://arxiv.org/pdf/1711.09869.pdf
voxel: 0.03
knn: 45
pcp_regularization: [0.03, 0.1, 0.3, 0.9]
pcp_spatial_weight: [5e-2, 5e-2, 5e-3, 5e-3]
pcp_cutoff: [10, 10, 80, 640]
pcp_k_adjacency: 10
pcp_w_adjacency: 1
pcp_iterations: 15
graph_k_max: 30
graph_gap: [0.2, 0.5, 1, 5]

# Batch construction parameterization
sample_segment_ratio: 0.1
sample_segment_by_size: True
sample_segment_by_class: False
sample_point_min: 32
sample_point_max: 128
sample_graph_r: 7  # set to r<=0 to skip SampleRadiusSubgraphs
sample_graph_k: 4
sample_graph_i_level: 1
sample_graph_disjoint: True
select_feat_point: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]  # 8-10 use the canonical room position
select_feat_segment: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]
select_feat_horizontal_edge: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]
select_feat_vertical_edge: [0, 1, 2, 3, 4, 5, 6, 7, 8]
sample_edge_n_min: -1  # [5, 5, 15, 15]
sample_edge_n_max: -1  # [10, 15, 25, 25]

# Augmentations parameterization
pos_jitter: 0.03
tilt_n_rotate_phi: 0.1
tilt_n_rotate_theta: 180
anisotropic_scaling: 0.2
node_feat_jitter: 0.01
h_edge_feat_jitter: 0.01
v_edge_feat_jitter: 0.01
node_feat_drop: 0
h_edge_feat_drop: 0
v_edge_feat_drop: 0

# Preprocessing
pre_transform:
    - transform: DataTo
      params:
        device: 'cuda'
    - transform: GridSampling3D  # might OOM on CUDA if voxel and GPU memory too small
      params:
        size: ${datamodule.voxel}
        hist_key: 'y'
        hist_size: ${eval:'${datamodule.num_classes} + 1'}
    - transform: KNN
      params:
        k: ${datamodule.knn}
        r_max: 2
        verbose: True
    - transform: DataTo
      params:
        device: 'cpu'
    - transform: GroundElevation
      params:
        threshold: 1.5
        scale: 4.0
    - transform: PointFeatures
      params:
        rgb: True
        hsv: False
        lab: False
        density: False
        linearity: True
        planarity: True
        scattering: True
        verticality: True
        normal: False
        length: False
        surface: False
        volume: False
        curvature: False
        k_min: 1
    - transform: DataTo
      params:
        device: 'cuda'
    - transform: AdjacencyGraph
      params:
        k: ${datamodule.pcp_k_adjacency}
        w: ${datamodule.pcp_w_adjacency}
    - transform: ConnectIsolated
      params:
        k: 1
    - transform: DataTo
      params:
        device: 'cpu'
    - transform: AddKeysToX  # move some features to 'x' to be used for partition
      params:
        keys: ${datamodule.partition_hf}
        delete_after: False
    - transform: CutPursuitPartition
      params:
        regularization: ${datamodule.pcp_regularization}
        spatial_weight: ${datamodule.pcp_spatial_weight}
        k_adjacency: ${datamodule.pcp_k_adjacency}
        cutoff: ${datamodule.pcp_cutoff}
        iterations: ${datamodule.pcp_iterations}
        parallel: True
        verbose: True
    - transform: NAGRemoveKeys  # remove 'x' used for partition (features are still preserved under their respective Data attributes)
      params:
        level: 'all'
        keys: ['x']
    - transform: NAGTo
      params:
        device: 'cuda'
#    - transform: NAGAddKeysToX  # save canonical room position 'pos_room' in x. This can be optionally discarded later on in train_transform
#      params:
#        level: 0
#        keys: ['pos_room']
    - transform: SegmentFeatures
      params:
        linearity: True
        planarity: True
        scattering: True
        verticality: True
        curvature: True
        log_length: True
        log_surface: True
        log_volume: True
        normal: True
        log_size: True
        n_min: 32
        n_max: 128
        mean_keys: ['rgb', 'elevation', 'pos_room']
        std_keys: []
    - transform: RadiusHorizontalGraph
      params:
        k_max: ${datamodule.graph_k_max}
        gap: ${datamodule.graph_gap}
        k_ratio: 0.2
        k_min: 20
        cycles: 3
        margin: 0.2
        chunk_size: [1e6, 1e5, 1e5, 1e5]  # reduce if CUDA memory errors
        halfspace_filter: True
        bbox_filter: True
        target_pc_flip: True
        source_pc_sort: False
    - transform: NAGTo
      params:
        device: 'cpu'

# CPU-based train transforms
train_transform:
    - transform: NAGRemoveKeys  # remove any features already computed in CutPursuitPartition
      params:
        level: '1+'
        keys: [ 'linearity', 'planarity', 'scattering', 'verticality', 'curvature']

# CPU-based val transforms
val_transform: ${datamodule.train_transform}

# CPU-based test transforms
test_transform: ${datamodule.train_transform}

# GPU-based train transforms
on_device_train_transform:
    - transform: SampleSubNodes
      params:
        low: 0
        high: 1
        n_min: ${datamodule.sample_point_min}
        n_max: ${datamodule.sample_point_max}
    - transform: SampleRadiusSubgraphs
      params:
        r: ${datamodule.sample_graph_r}
        k: ${datamodule.sample_graph_k}
        i_level: ${datamodule.sample_graph_i_level}
        by_size: False
        by_class: False
        disjoint: ${datamodule.sample_graph_disjoint}
    - transform: SampleSegments
      params:
        ratio: ${datamodule.sample_segment_ratio}
        by_size: ${datamodule.sample_segment_by_size}
        by_class: ${datamodule.sample_segment_by_class}
    - transform: NAGJitterKey  # before OnTheFlyHorizontalEdgeFeatures to affect RPEs
      params:
        key: 'pos'
        sigma: ${datamodule.pos_jitter}
        trunc: ${datamodule.voxel}
    - transform: RandomTiltAndRotate  # before OnTheFlyHorizontalEdgeFeatures to affect RPEs
      params:
        phi: ${datamodule.tilt_n_rotate_phi}
        theta: ${datamodule.tilt_n_rotate_theta}
    - transform: RandomAnisotropicScale  # before OnTheFlyHorizontalEdgeFeatures to affect RPEs
      params:
        delta: ${datamodule.anisotropic_scaling}
    - transform: RandomAxisFlip  # before OnTheFlyHorizontalEdgeFeatures to affect RPEs
      params:
        p: 0.5
    - transform: OnTheFlyHorizontalEdgeFeatures
      params:
        mean_offset: True
        std_offset: True
        mean_dist: True
        angle_source: True
        angle_target: True
        centroid_direction: True
        centroid_dist: True
        normal_angle: True
        log_length: True
        log_surface: True
        log_volume: True
        log_size: True
    - transform: OnTheFlyVerticalEdgeFeatures
      params:
        centroid_direction: True
        centroid_dist: True
        normal_angle: True
        log_length: True
        log_surface: True
        log_volume: True
        log_size: True
    - transform: SampleEdges
      params:
        level: '1+'
        n_min: ${datamodule.sample_edge_n_min}
        n_max: ${datamodule.sample_edge_n_max}
    - transform: NAGAddKeysToX  # adapt datamodule.feat_segment if modified
      params:
        level: '1+'
        keys: ['log_length', 'log_surface', 'log_volume', 'normal', 'log_size']
    - transform: NAGSelectColumns
      params:
        level: 0
        key: 'x'
        idx: ${datamodule.select_feat_point}
    - transform: NAGSelectColumns
      params:
        level: '1+'
        key: 'x'
        idx: ${datamodule.select_feat_segment}
    - transform: NAGSelectColumns
      params:
        level: '1+'
        key: 'edge_attr'
        idx: ${datamodule.select_feat_horizontal_edge}
    - transform: NAGSelectColumns
      params:
        level: 'all'
        key: 'vertical_edge_attr'
        idx: ${datamodule.select_feat_vertical_edge}
    - transform: NAGJitterKey
      params:
        key: 'x'
        sigma: ${datamodule.node_feat_jitter}
        trunc: ${eval:'2 * ${datamodule.node_feat_jitter}'}
    - transform: NAGJitterKey
      params:
        key: 'edge_attr'
        sigma: ${datamodule.h_edge_feat_jitter}
        trunc: ${eval:'2 * ${datamodule.h_edge_feat_jitter}'}
    - transform: NAGJitterKey
      params:
        key: 'vertical_edge_attr'
        sigma: ${datamodule.v_edge_feat_jitter}
        trunc: ${eval:'2 * ${datamodule.v_edge_feat_jitter}'}
    - transform: NAGColorAutoContrast
      params:
        level: all
        p: 0.5
        x_idx: 0
    - transform: NAGDropoutColumns
      params:
        level: 'all'
        p: ${datamodule.node_feat_drop}
        key: 'x'
    - transform: NAGDropoutColumns
      params:
        level: 'all'
        p: ${datamodule.h_edge_feat_drop}
        key: 'edge_attr'
    - transform: NAGDropoutColumns
      params:
        level: 'all'
        p: ${datamodule.v_edge_feat_drop}
        key: 'vertical_edge_attr'
    - transform: NAGAddSelfLoops

# GPU-based val transforms
# Should we actually sample at validation time ?
# Should we do test-time augmentations ?
on_device_val_transform:
    - transform: SampleSubNodes
      params:
        low: 0
        high: 1
        n_min: 128
        n_max: 256
    - transform: OnTheFlyHorizontalEdgeFeatures
      params:
        mean_offset: True
        std_offset: True
        mean_dist: True
        angle_source: True
        angle_target: True
        centroid_direction: True
        centroid_dist: True
        normal_angle: True
        log_length: True
        log_surface: True
        log_volume: True
        log_size: True
    - transform: OnTheFlyVerticalEdgeFeatures
      params:
        centroid_direction: True
        centroid_dist: True
        normal_angle: True
        log_length: True
        log_surface: True
        log_volume: True
        log_size: True
    - transform: NAGAddKeysToX  # adapt datamodule.feat_segment if modified
      params:
        level: '1+'
        keys: ['log_length', 'log_surface', 'log_volume', 'normal', 'log_size']
    - transform: NAGSelectColumns
      params:
        level: 0
        key: 'x'
        idx: ${datamodule.select_feat_point}
    - transform: NAGSelectColumns
      params:
        level: '1+'
        key: 'x'
        idx: ${datamodule.select_feat_segment}
    - transform: NAGSelectColumns
      params:
        level: '1+'
        key: 'edge_attr'
        idx: ${datamodule.select_feat_horizontal_edge}
    - transform: NAGSelectColumns
      params:
        level: 'all'
        key: 'vertical_edge_attr'
        idx: ${datamodule.select_feat_vertical_edge}
    - transform: NAGAddSelfLoops

# GPU-based test transforms
on_device_test_transform: ${datamodule.on_device_val_transform}
