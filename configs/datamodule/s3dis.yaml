defaults:
  - default.yaml

_target_: src.datamodules.s3dis.S3DISDataModule

fold: 5
trainval: True
val_on_test: True

dataloader:
    batch_size: 1

# These parameters are not actually used by the DataModule, but are used
# here to facilitate model parameterization with config interpolation
num_classes: 13
feat_point: ${eval:'len(${datamodule.select_feat_point})'}
feat_segment: ${eval:'len(${datamodule.select_feat_segment})'}
feat_edge: ${eval:'len(${datamodule.select_feat_edge})'}

# Parameters declared here to facilitate tuning configs without copying
# all the pre_transforms

# Based on SPG: https://arxiv.org/pdf/1711.09869.pdf
voxel: 0.03
knn: 45
regularization: [0.03, 0.1, 0.3, 0.9]
spatial_weight: [5e-2, 5e-2, 5e-3, 5e-3]
cutoff: [10, 10, 80, 640]
w_adjacency: 1

dropout_segment_ratio: 0.2
sample_graph_i_level: null  # setting to null will skip SampleGraph
sample_graph_k_sample: 4
sample_graph_k_hops: 4
select_feat_point: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]  # 8-10 use the canonical room position
select_feat_segment: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]
select_feat_edge: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]
select_feat_vertical_edge: [0, 1, 2, 3, 4, 5, 6, 7, 8]

# Preprocessing
pre_transform:
    - transform: DataTo
      params:
        device: 'cuda'
    - transform: GridSampling3D  # might OOM on CUDA if voxel and GPU memory too small
      params:
        size: ${datamodule.voxel}
        hist_key: 'y'
        hist_size: ${eval:'${datamodule.num_classes} + 1'}
    - transform: KNN
      params:
        k: ${datamodule.knn}
        r_max: 2
        verbose: True
    - transform: DataTo
      params:
        device: 'cpu'
    - transform: GroundElevation
      params:
        threshold: 1.5
        scale: 4.0
    - transform: PointFeatures
      params:
        rgb: True
        hsv: False
        lab: False
        density: False
        linearity: True
        planarity: True
        scattering: True
        verticality: True
        normal: False
        length: False
        surface: False
        volume: False
        curvature: False
        elevation: True
        pos_room: False
        k_min: 1
    - transform: DataTo
      params:
        device: 'cuda'
    - transform: AdjacencyGraph
      params:
        k: 10
        w: ${datamodule.w_adjacency}
    - transform: ConnectIsolated
      params:
        k: 1
    - transform: DataTo
      params:
        device: 'cpu'
    - transform: CutPursuitPartition
      params:
        regularization: ${datamodule.regularization}
        spatial_weight: ${datamodule.spatial_weight}
        k_adjacency: 10
        cutoff: ${datamodule.cutoff}
        iterations: 15
        parallel: True
        verbose: True
    - transform: NAGTo
      params:
        device: 'cuda'
    - transform: NAGAddKeyToX  # save canonical room position 'pos_room' in x. This can be optionally discarded later on in train_transform
      params:
        level: 0
        keys: ['pos_room']
    - transform: SegmentFeatures
      params:
        n_min: 32
        n_max: 128
    - transform: RadiusHorizontalGraph
      params:
        k_max: 30
        gap: [0.2, 0.5, 1, 5]
        k_ratio: 0.2
        k_min: 20
        cycles: 3
        margin: 0.2
        chunk_size: [1e6, 1e5, 1e5, 1e5]  # reduce if CUDA memory errors
        halfspace_filter: True
        bbox_filter: True
        target_pc_flip: True
        source_pc_sort: False
    - transform: NAGTo
      params:
        device: 'cpu'

# CPU-based train transforms
train_transform:
    - transform: NAGRemoveKeys  # remove any features already computed in CutPursuitPartition
      params:
        level: '1+'
        keys: [ 'linearity', 'planarity', 'scattering', 'verticality', 'curvature']

# CPU-based val transforms
val_transform: ${datamodule.train_transform}

# CPU-based test transforms
test_transform: ${datamodule.train_transform}

# GPU-based train transforms
on_device_train_transform:
    - transform: SampleSegments
      params:
        high: 1
        low: 0
        n_min: 32
        n_max: 128
    - transform: SampleGraph
      params:
        i_level: ${datamodule.sample_graph_i_level}
        k_sample: ${datamodule.sample_graph_k_sample}
        k_hops: ${datamodule.sample_graph_k_hops}
        by_size: False
        by_class: False
    - transform: DropoutSegments
      params:
        ratio: ${datamodule.dropout_segment_ratio}
        by_size: False
        by_class: False
    - transform: JitterPosition  # before OnTheFlyHorizontalEdgeFeatures to affect RPEs
      params:
        sigma: 0.03
    - transform: RandomTiltAndRotate  # before OnTheFlyHorizontalEdgeFeatures to affect RPEs
      params:
        phi: 0.1
        theta: 180
    - transform: RandomAnisotropicScale  # before OnTheFlyHorizontalEdgeFeatures to affect RPEs
      params:
        delta: 0.2
    - transform: RandomAxisFlip  # before OnTheFlyHorizontalEdgeFeatures to affect RPEs
      params:
        p: 0.5
    - transform: OnTheFlyHorizontalEdgeFeatures
      params:
        mean_offset: True
        std_offset: True
        mean_dist: True
        angle_source: True
        angle_target: True
        centroid_direction: True
        centroid_dist: True
        normal_angle: True
        log_length: True
        log_surface: True
        log_volume: True
        log_size: True
    - transform: OnTheFlyVerticalEdgeFeatures
      params:
        centroid_direction: True
        centroid_dist: True
        normal_angle: True
        log_length: True
        log_surface: True
        log_volume: True
        log_size: True
#    - transform: SampleEdges
#      params:
#        level: '1+'
#        n_min: [5, 5, 15, 15]
#        n_max: [10, 15, 25, 25]
    - transform: NAGAddKeyToX  # adapt datamodule.feat_segment if modified
      params:
        level: '1+'
        keys: ['log_length', 'log_surface', 'log_volume', 'normal', 'log_size']
    - transform: NAGSelectColumns
      params:
        level: 0
        key: 'x'
        idx: ${datamodule.select_feat_point}
    - transform: NAGSelectColumns
      params:
        level: '1+'
        key: 'x'
        idx: ${datamodule.select_feat_segment}
    - transform: NAGSelectColumns
      params:
        level: '1+'
        key: 'edge_attr'
        idx: ${datamodule.select_feat_edge}
    - transform: NAGSelectColumns
      params:
        level: 'all'
        key: 'vertical_edge_attr'
        idx: ${datamodule.select_feat_vertical_edge}
    - transform: JitterFeatures
      params:
        sigma: 0.01
    - transform: JitterEdgeFeatures
      params:
        sigma: 0.01
    - transform: NAGColorAutoContrast
      params:
        level: all
        p: 0.5
        x_idx: 0
    - transform: NAGAddSelfLoops

# GPU-based val transforms
# Should we actually sample at validation time ?
# Should we do test-time augmentations ?
on_device_val_transform:
    - transform: SampleSegments
      params:
        high: 1
        low: 0
        n_min: 128
        n_max: 256
    - transform: OnTheFlyHorizontalEdgeFeatures
      params:
        mean_offset: True
        std_offset: True
        mean_dist: True
        angle_source: True
        angle_target: True
        centroid_direction: True
        centroid_dist: True
        normal_angle: True
        log_length: True
        log_surface: True
        log_volume: True
        log_size: True
    - transform: OnTheFlyVerticalEdgeFeatures
      params:
        centroid_direction: True
        centroid_dist: True
        normal_angle: True
        log_length: True
        log_surface: True
        log_volume: True
        log_size: True
    - transform: NAGAddKeyToX  # adapt datamodule.feat_segment if modified
      params:
        level: '1+'
        keys: ['log_length', 'log_surface', 'log_volume', 'normal', 'log_size']
    - transform: NAGSelectColumns
      params:
        level: 0
        key: 'x'
        idx: ${datamodule.select_feat_point}
    - transform: NAGSelectColumns
      params:
        level: '1+'
        key: 'x'
        idx: ${datamodule.select_feat_segment}
    - transform: NAGSelectColumns
      params:
        level: '1+'
        key: 'edge_attr'
        idx: ${datamodule.select_feat_edge}
    - transform: NAGSelectColumns
      params:
        level: 'all'
        key: 'vertical_edge_attr'
        idx: ${datamodule.select_feat_vertical_edge}
    - transform: NAGAddSelfLoops

# GPU-based test transforms
on_device_test_transform: ${datamodule.on_device_val_transform}
